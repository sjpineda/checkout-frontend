import _extends from '@babel/runtime/helpers/extends';
import _defineProperty from '@babel/runtime/helpers/defineProperty';
import _typeof from '@babel/runtime/helpers/typeof';
import _slicedToArray from '@babel/runtime/helpers/slicedToArray';
import _objectWithoutProperties from '@babel/runtime/helpers/objectWithoutProperties';
import React, { useEffect } from 'react';
import PropTypes from 'prop-types';

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

var JotFormEmbed$1 = function JotFormEmbed(_ref) {
  var formURL = _ref.formURL,
      autoResize = _ref.autoResize,
      autoFocus = _ref.autoFocus,
      _ref$heightOffset = _ref.heightOffset,
      heightOffset = _ref$heightOffset === void 0 ? 15 : _ref$heightOffset,
      _ref$initialHeight = _ref.initialHeight,
      initialHeight = _ref$initialHeight === void 0 ? 540 : _ref$initialHeight,
      onSubmit = _ref.onSubmit,
      formID = _ref.formID,
      _ref$style = _ref.style,
      style = _ref$style === void 0 ? {} : _ref$style,
      rest = _objectWithoutProperties(_ref, ["formURL", "autoResize", "autoFocus", "heightOffset", "initialHeight", "onSubmit", "formID", "style"]);

  var iframeRef = React.useRef();

  var _React$useState = React.useState({
    height: initialHeight,
    overflow: 'hidden',
    border: 0,
    width: '100%'
  }),
      _React$useState2 = _slicedToArray(_React$useState, 2),
      componentStyles = _React$useState2[0],
      setComponentStyles = _React$useState2[1];

  useEffect(function () {
    var handleMessages = function handleMessages(content) {
      if (!content) {
        return;
      } // Check if submission is completed.


      if (_typeof(content.data) === 'object' && content.data.action === 'submission-completed') {
        onSubmit();
        return;
      } // From now on we only handle style related messages


      if (typeof content.data !== 'string') {
        return;
      }

      var _content$data$split = content.data.split(':'),
          _content$data$split2 = _slicedToArray(_content$data$split, 3),
          method = _content$data$split2[0],
          value = _content$data$split2[1],
          targetForm = _content$data$split2[2]; // eslint-disable-next-line eqeqeq


      if (formID && targetForm && targetForm != formID) {
        // If you want to use multiple form via embed you need to use formID
        return;
      }

      switch (true) {
        case method === 'scrollIntoView' && autoFocus:
          if (typeof iframeRef.current.scrollIntoView === 'function') {
            iframeRef.current.scrollIntoView();
          }

          break;

        case method === 'setHeight' && autoResize:
          setComponentStyles(_objectSpread(_objectSpread({}, componentStyles), {}, {
            height: parseInt(value, 10) + heightOffset
          }));
          break;

        case method === 'setMinHeight' && autoResize:
          setComponentStyles(_objectSpread(_objectSpread({}, componentStyles), {}, {
            minHeight: parseInt(value, 10) + heightOffset
          }));
          break;

        case method === 'reloadPage':
          iframeRef.current.reload();
          break;
      }
    };

    if (window.addEventListener) {
      window.addEventListener('message', handleMessages, true); // Capture
    } else if (window.attachEvent) {
      window.attachEvent('onmessage', handleMessages);
    }

    return function () {
      if (window.removeEventListener) {
        window.removeEventListener('message', handleMessages, true);
      }
    };
  }, []);
  return /*#__PURE__*/React.createElement("iframe", _extends({
    ref: iframeRef,
    src: formURL,
    title: "JotForm Form",
    style: _objectSpread(_objectSpread({}, componentStyles), style),
    allowTransparency: "true",
    allowFullScreen: "true",
    allow: "geolocation; microphone; camera",
    frameBorder: "0",
    scrolling: "no"
  }, rest));
};

var noop = function noop() {};

JotFormEmbed$1.propTypes = {
  formURL: PropTypes.string.isRequired,
  formID: PropTypes.oneOfType(PropTypes.number, PropTypes.bool),
  autoResize: PropTypes.bool,
  autoFocus: PropTypes.bool,
  heightOffset: PropTypes.number,
  initialHeight: PropTypes.number,
  onSubmit: PropTypes.func,
  style: PropTypes.shape({})
};
JotFormEmbed$1.defaultProps = {
  autoResize: true,
  formID: false,
  autoFocus: true,
  heightOffset: 15,
  initialHeight: 540,
  onSubmit: noop,
  style: {}
};

var JotFormEmbed = JotFormEmbed$1;

export default JotFormEmbed$1;
export { JotFormEmbed };
